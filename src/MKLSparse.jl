module MKLSparse

using LinearAlgebra, SparseArrays
using LinearAlgebra: BlasInt, BlasFloat, checksquare
using MKL_jll: libmkl_rt

# For testing purposes:
global const __counter = Ref(0)

@enum Threading begin
    THREADING_INTEL
    THREADING_SEQUENTIAL
    THREADING_PGI
    THREADING_GNU
    THREADING_TBB
end

@enum Interface begin
    INTERFACE_LP64
    INTERFACE_ILP64
    INTERFACE_GNU
end

function set_threading_layer(layer::Threading = THREADING_SEQUENTIAL)
    err = @ccall libmkl_rt.MKL_Set_Threading_Layer(layer::Cint)::Cint
    (err == -1) && error("MKL_Set_Threading_Layer() returned -1")
    return nothing
end

function set_interface_layer(interface::Interface = INTERFACE_ILP64)
    err = @ccall libmkl_rt.MKL_Set_Interface_Layer(interface::Cint)::Cint
    (err == -1) && error("MKL_Set_Interface_Layer() returned -1")
    return nothing
end

function __init__()
    set_interface_layer(Base.USE_BLAS64 ? INTERFACE_ILP64 : INTERFACE_LP64)
end

# Wrappers generated by Clang.jl
include("libmklsparse.jl")
include("types.jl")

# TODO: BLAS1

# BLAS2 and BLAS3
include("matdescra.jl")
include("generator.jl")
include("matmul.jl")

end # module
